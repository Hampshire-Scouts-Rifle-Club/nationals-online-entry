input CreateShooterInput {
	firstName: String!
	surname: String!
	scoutGroup: String!
	ageDuringCompetition: Int
	enteredLastYear: Boolean!
	isRangeOfficer: Boolean!
	rangeOfficerCertificate: String
}

input CreateShootingEventInput {
	title: String!
	description: String!
	slots: Int
	price: Float
}

input DeleteShooterInput {
	id: ID!
}

input DeleteShootingEventInput {
	id: ID!
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

type Mutation {
	createShootingEvent(input: CreateShootingEventInput!): ShootingEvent
	updateShootingEvent(input: UpdateShootingEventInput!): ShootingEvent
	deleteShootingEvent(input: DeleteShootingEventInput!): ShootingEvent
	createShooter(input: CreateShooterInput!): Shooter
	updateShooter(input: UpdateShooterInput!): Shooter
	deleteShooter(input: DeleteShooterInput!): Shooter
}

type Query {
	getShootingEvent(id: ID!): ShootingEvent
	listShootingEvents(filter: TableShootingEventFilterInput, limit: Int, nextToken: String): ShootingEventConnection
	getShooter(id: ID!): Shooter
	listShooters(filter: TableShooterFilterInput, limit: Int, nextToken: String): ShooterConnection
}

type Shooter {
	id: ID!
	firstName: String!
	surname: String!
	scoutGroup: String!
	ageDuringCompetition: Int
	enteredLastYear: Boolean!
	isRangeOfficer: Boolean!
	rangeOfficerCertificate: String
	eventsEntered: [ShootingEvent!]!
}

type ShooterConnection {
	items: [Shooter]
	nextToken: String
}

type ShootingEvent {
	id: ID!
	title: String!
	description: String!
	slots: Int
	price: Float
}

type ShootingEventConnection {
	items: [ShootingEvent]
	nextToken: String
}

type Subscription {
	onCreateShootingEvent(
		id: ID,
		title: String,
		description: String,
		slots: Int,
		price: Float
	): ShootingEvent
		@aws_subscribe(mutations: ["createShootingEvent"])
	onUpdateShootingEvent(
		id: ID,
		title: String,
		description: String,
		slots: Int,
		price: Float
	): ShootingEvent
		@aws_subscribe(mutations: ["updateShootingEvent"])
	onDeleteShootingEvent(
		id: ID,
		title: String,
		description: String,
		slots: Int,
		price: Float
	): ShootingEvent
		@aws_subscribe(mutations: ["deleteShootingEvent"])
	onCreateShooter(
		id: ID,
		firstName: String,
		surname: String,
		scoutGroup: String,
		ageDuringCompetition: Int
	): Shooter
		@aws_subscribe(mutations: ["createShooter"])
	onUpdateShooter(
		id: ID,
		firstName: String,
		surname: String,
		scoutGroup: String,
		ageDuringCompetition: Int
	): Shooter
		@aws_subscribe(mutations: ["updateShooter"])
	onDeleteShooter(
		id: ID,
		firstName: String,
		surname: String,
		scoutGroup: String,
		ageDuringCompetition: Int
	): Shooter
		@aws_subscribe(mutations: ["deleteShooter"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableShooterFilterInput {
	id: TableIDFilterInput
	firstName: TableStringFilterInput
	surname: TableStringFilterInput
	scoutGroup: TableStringFilterInput
	ageDuringCompetition: TableIntFilterInput
	enteredLastYear: TableBooleanFilterInput
	isRangeOfficer: TableBooleanFilterInput
	rangeOfficerCertificate: TableStringFilterInput
}

input TableShootingEventFilterInput {
	id: TableIDFilterInput
	title: TableStringFilterInput
	description: TableStringFilterInput
	slots: TableIntFilterInput
	price: TableFloatFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateShooterInput {
	id: ID!
	firstName: String
	surname: String
	scoutGroup: String
	ageDuringCompetition: Int
	enteredLastYear: Boolean
	isRangeOfficer: Boolean
	rangeOfficerCertificate: String
}

input UpdateShootingEventInput {
	id: ID!
	title: String
	description: String
	slots: Int
	price: Float
}